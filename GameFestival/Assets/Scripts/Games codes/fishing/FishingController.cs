using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.SceneManagement;

public class FishingController : MonoBehaviour
{
    public RectTransform indicator;
    public RectTransform indicatorInside;
    public RectTransform fish;
    public TextMeshProUGUI resultText;
    public GameObject gameOverPanel;  // –ü–∞–Ω–µ–ª—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≥—Ä–∏
    public Button restartButton; // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –≥—Ä–∏
    public Button mainMenuButton; // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    public Button startButton;  // –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç—É –≥—Ä–∏
    public TextMeshProUGUI VictoryText; // –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–º–æ–≥–∏
public TextMeshProUGUI FailureText; // –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ—Ä–∞–∑–∫–∏
public Image holdProgressBar; // üîÅ –°—é–¥–∏ –ø—ñ–¥—Ç—è–≥–Ω–µ–º–æ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä –∑ UI
public AudioSource audioSource;
public AudioClip victorySound;
private float holdTime = 0f;
private float requiredHoldTime = 5f;
private float fishMoveTimer = 0f;
    private bool isFishing = false;
    private float fishPosition;
    private float linePosition = -2.94f;
    private bool isFishCaught = false;
    private float gameTime = 10f;  // –¢–∞–π–º–µ—Ä 10 —Å–µ–∫—É–Ω–¥
    private float remainingTime;  // –ó–∞–ª–∏—à–∫–æ–≤–∏–π —á–∞—Å –¥–ª—è –≥—Ä–∏
    private float fishStartX;
private float fishTargetY = 0.5f;
private float fishChangeInterval = 0.8f; // –ë—É–ª–æ 1.5f
private float fishChangeTimer = 0f;
private float fishSmoothSpeed = 25f; // –ë—É–ª–æ 9, —Ç–µ–ø–µ—Ä —à–≤–∏–¥—à–µ
    void Start()
    {
        remainingTime = gameTime;  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–∞–π–º–µ—Ä
        gameOverPanel.SetActive(false);  // –ü–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞
        resultText.gameObject.SetActive(false); // –¢–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –Ω–µ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è
        restartButton.gameObject.SetActive(false); // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –Ω–µ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è
        mainMenuButton.gameObject.SetActive(false); // –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–µ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è
        fishStartX = fish.anchoredPosition.x;
        if (fish != null)
            fish.gameObject.SetActive(false);
        resultText.gameObject.SetActive(false);
        linePosition = -263f;  // –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è
        SetIndicatorPosition();
        SetFishPosition();  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è —Ä–∏–±–∫–∏
    }
    void Update()
    {
       if (isFishing)
{
    remainingTime -= Time.deltaTime;
    if (remainingTime <= 0f)
    {
        EndGame(false);
    }
    else
    {
        resultText.text = "–ß–∞—Å: " + Mathf.Ceil(remainingTime).ToString();
    }
    MoveIndicator();
// –ó–±—ñ–ª—å—à—É—î–º–æ –∞–º–ø–ª—ñ—Ç—É–¥—É —Ä—É—Ö—É –¥–æ 100 (—â–æ–± —Ä–∏–±–∫–∞ —Ä—É—Ö–∞–ª–∞—Å—å –¥—É–∂–µ —Å–∏–ª—å–Ω–æ)
fishChangeTimer += Time.deltaTime;
if (fishChangeTimer >= fishChangeInterval)
{
    float newTarget;
    do
    {
        // –ê–º–ø–ª—ñ—Ç—É–¥–∞ —Ä—É—Ö—É –∑–±—ñ–ª—å—à–µ–Ω–∞ –≤ 100 —Ä–∞–∑—ñ–≤
        newTarget = fishPosition + Random.Range(-30f, 30f); // —Ä—É—Ö –≤–≥–æ—Ä—É –∞–±–æ –≤–Ω–∏–∑, –∞–ª–µ –Ω–µ –Ω–∞ 100
    newTarget = Mathf.Clamp(newTarget, 0f, 100f); // –æ–±–º–µ–∂–∏—Ç–∏ –≤ –º–µ–∂–∞—Ö
    } while (Mathf.Abs(newTarget - fishPosition) < 0.25f); // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –∑–º—ñ–Ω

    fishTargetY = newTarget;

    // –†–∞–Ω–¥–æ–º–Ω–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –∑–º—ñ–Ω–∞–º–∏ –ø–æ–∑–∏—Ü—ñ—ó –∑ –º–µ–Ω—à–∏–º –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º
    fishChangeInterval = Random.Range(0.2f, 0.5f); // –®–≤–∏–¥—à–∏–π —Ä—É—Ö –∑ –º–µ–Ω—à–æ—é –ø–∞—É–∑–æ—é
    fishChangeTimer = 0f;
}

// –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –ø–ª–∞–≤–Ω–æ—Å—Ç—ñ —Ä—É—Ö—É
fishPosition = Mathf.Lerp(fishPosition, fishTargetY, Time.deltaTime * fishSmoothSpeed);

SetFishPosition();

    CheckIfFishCaught();
}
    }
    public void StartFishing()
    {
        isFishing = true;
        isFishCaught = false;
        resultText.gameObject.SetActive(false);
        if (startButton != null)
        {
            startButton.gameObject.SetActive(false); // –¶–µ –ø—Ä–∏—Ö–æ–≤–∞—î –∫–Ω–æ–ø–∫—É
        }
        fishPosition = Random.Range(0f, 1f); // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–∑–∏—Ü—ñ—ó —Ä–∏–±–∫–∏
        SetFishPosition(); // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó —Ä–∏–±–∫–∏ –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É —Ä–∏–±–æ–ª–æ–≤–ª—ñ
        fish.gameObject.SetActive(true);
    }
    void MoveIndicator()
    {
        // –ó–º–µ–Ω—à—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å —Ä—É—Ö—É
        float moveSpeed = 150f;  // –ë—É–ª–æ 80f, —Ç–µ–ø–µ—Ä –≤ 2 —Ä–∞–∑–∏ —à–≤–∏–¥—à–µ
        // –†—É—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        if (Input.GetKey(KeyCode.W))
            linePosition += moveSpeed * Time.deltaTime;
        else if (Input.GetKey(KeyCode.S))
            linePosition -= moveSpeed * Time.deltaTime;
        // –û–±–º–µ–∂–µ–Ω–Ω—è —Ä—É—Ö—É —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        linePosition = Mathf.Clamp(linePosition, -185f, 165f);
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–ª–æ–≤–ª–µ–Ω–∞ —Ä–∏–±–∫–∞
        CheckIfFishCaught();
        SetIndicatorPosition();
        SetFishPosition(); // –ó–º—ñ—â–µ–Ω–Ω—è —Ä–∏–±–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    }
   void CheckIfFishCaught()
{
    float fishY = fish.anchoredPosition.y;
    float indicatorY = indicatorInside.anchoredPosition.y;

    float threshold = 50f; // üëà —Ä–æ–∑—à–∏—Ä–µ–Ω–∞ –∑–æ–Ω–∞ –ø–æ–ø–∞–¥–∞–Ω–Ω—è

    if (Mathf.Abs(fishY - indicatorY) < threshold)
    {
        holdTime += Time.deltaTime;

        if (holdProgressBar != null)
            holdProgressBar.fillAmount = holdTime / requiredHoldTime;

        if (holdTime >= requiredHoldTime)
        {
            if (audioSource != null && victorySound != null)
                audioSource.PlayOneShot(victorySound);
            EndGame(true);
        }
    }
    else
    {
        holdTime = Mathf.Max(holdTime - Time.deltaTime * 2f, 0f);

        if (holdProgressBar != null)
            holdProgressBar.fillAmount = holdTime / requiredHoldTime;
    }
}

   void SetIndicatorPosition()
{
    if (indicator == null || indicatorInside == null) return;
    float height = indicator.rect.height;
    float yOffset = Mathf.Lerp(-height / 2, height / 2, Mathf.InverseLerp(-263f, 229f, linePosition));
    indicatorInside.anchoredPosition = new Vector2(
        indicatorInside.anchoredPosition.x,
        indicator.anchoredPosition.y + yOffset
    );
}
  void SetFishPosition()
{
    if (fish == null || indicator == null) return;
    float height = indicator.rect.height;
    float fishYOffset = Mathf.Lerp(-height / 2, height / 2, Mathf.InverseLerp(-263f, 229f, fishPosition));
    float newY = indicator.anchoredPosition.y + fishYOffset;
    // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –≤–∏—Ö–æ–¥—É –∑–∞ –º–µ–∂—ñ
    newY = Mathf.Clamp(newY, -263f, 229f);
    fish.anchoredPosition = new Vector2(
        fish.anchoredPosition.x,
        newY
    );
}
    void EndGame(bool isVictory)
{
    gameOverPanel.SetActive(true);
    if (isVictory)
    {
        VictoryText.gameObject.SetActive(true);  // –ü–æ–∫–∞–∑—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–º–æ–≥–∏
        FailureText.gameObject.SetActive(false); // –•–æ–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ—Ä–∞–∑–∫–∏
    }
    else
    {
        VictoryText.gameObject.SetActive(false);  // –•–æ–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–º–æ–≥–∏
        FailureText.gameObject.SetActive(true);  // –ü–æ–∫–∞–∑—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ—Ä–∞–∑–∫–∏
    }
    indicator.gameObject.SetActive(false);
    fish.gameObject.SetActive(false);
    restartButton.gameObject.SetActive(true);  // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
    mainMenuButton.gameObject.SetActive(true); // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
}
public void RestartGame()
{
    remainingTime = gameTime;
    resultText.gameObject.SetActive(false);
    gameOverPanel.SetActive(false);
    restartButton.gameObject.SetActive(false);
    mainMenuButton.gameObject.SetActive(false);
    // –°–∫–∏–¥–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
    indicator.gameObject.SetActive(true);
    if (indicatorInside != null)
    {
        linePosition = -263f; // –°–∫–∏–¥–∞–Ω–Ω—è
        SetIndicatorPosition(); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è
    }
    // –ù–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è —Ä–∏–±–∫–∏
    fishPosition = Random.Range(0f, 1f); // –°–∫–∏–¥–∞–Ω–Ω—è
    SetFishPosition();
    fish.gameObject.SetActive(true);
    // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω–∏
    isFishing = true;
    VictoryText.gameObject.SetActive(false);
    FailureText.gameObject.SetActive(false);
    startButton.gameObject.SetActive(false);
    holdTime = 0f;
if (holdProgressBar != null)
    holdProgressBar.fillAmount = 0f;
}
    public void GoToMainMenu()
    {
        gameOverPanel.SetActive(false);
        resultText.gameObject.SetActive(false);
        startButton.gameObject.SetActive(true);  // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç—É
        SceneManager.LoadScene("Main Game Map");
    }
}